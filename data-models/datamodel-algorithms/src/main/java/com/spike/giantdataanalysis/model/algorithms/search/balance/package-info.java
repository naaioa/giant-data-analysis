/**
 * 平衡查找树: 2-3树, 红黑树.
 * <p>
 * 设计约束: 在维持树的完美平衡的前提下为新键腾出空间.
 * 
 * <pre>
 * 1 2-3树(概念)
 * 空树或由2-节点/3-节点组成, 其中:
 * 2-节点: 1个键值, 2个链接(左链接中键小于该节点, 右链接中的键大于该节点);
 * 3-节点: 2个键值, 3个链接(左链接中键小于该节点, 右链接中的键大于该节点, 中链接位于该节点两个键值之间).
 * 
 * 查找: 二叉查找树的查找算法的简单扩展.
 * 
 * 插入: 依据未命中的查找结束于的节点类型
 * (1) 2-节点
 * 插入键值替换为3-节点;
 * (2) 只有一个3-节点
 * 创建临时的4-节点再分解为3个2-节点: 根节点含中键, 左链接节点中含较小值, 右链接节点中含较大值; 树高加1;
 * 在根节点成为临时4-节点时按此处理;
 * (3) 父节点为2-节点的3-节点
 * 与(2)类似, 创建临时的4-节点再分解为3个2-节点, 将中键向上传播插入父2-节点中;
 * (4) 父节点为3-节点的3-节点
 * 与(2)类似, 创建临时的4-节点再分解为3个2-节点, 将中键向上传播插入父3-节点中, 父3-节点成为临时4-节点再分解, 依次向上处理;
 * 
 * 2 红黑树 RedBlackBST
 * 
 * </pre>
 * @author zhoujiagen
 */
package com.spike.giantdataanalysis.model.algorithms.search.balance;